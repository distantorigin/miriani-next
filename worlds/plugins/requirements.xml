<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="requirements"
   author="distantorigin"
   id="6773a4c6f0e71d32feac526e"
   language="Lua"
   purpose="Manages Miriani-Next requirements"
   requires="5.05"
   save_state="y"
>
</plugin>

<script>
<![CDATA[
require "checkplugin"
require "string_split"


required_plugins = {
   ["54846c23d8b15594e7eb4b8a"] = "output_functions",
   ["925cdd0331023d9f0b8f05a7"] = "MushReader",
   ["87a0ec3649ab9a04d5ea618d"] = "Omit_Blank_Lines",
   ["6000a4c6f0e71d31fecf523d"] = "channel_history",
   ["d2fa45d390d935d947cdc169"] = "MUSHclient_Help",
   ["843d2f53cb3685465bda7d4a"] = "toastush",
   ["23a603753436e54efaec41dc"] = "log_manager",
   ["520bc4f29806f7af0017985f"] = "Hyperlink_URL2",
   ["706cd88f4d441a81439bd421"] = "updater",
   ["79772f9b67c1e42f22a3eb95"] = "update_watcher"
   ["a40aefb9acf23ddd2dd12c0b"] = "next_dev",
}

-- Optional plugins can be added here as needed
optional_plugins = {
   ["bb6a05ed7534b5db1ed40511"] = "Automatic_Backup",
   ["369e8998ba42093fcc9231a2"] = "auto_retyping"
}


function load_plugins(plugin_list)
   for id,name in pairs(plugin_list) do
      do_plugin_check_now(id, name)
   end
end

function check_plugins(plugin_list)
   local messages = {}
   for id,name in pairs(plugin_list) do
      local plugin_msg = {
         "khaki", "", "Plugin ",
         "lightskyblue", "", name..".xml",
         "khaki", "", " [",
         "lightskyblue", "", id,
         "khaki", "", "] ",
         "khaki", ""
      }
      if not IsPluginInstalled(id) then
         table.insert(plugin_msg, "is not loaded.")
         table.insert(messages, plugin_msg)
      elseif not GetPluginInfo(id, 17) then
         table.insert(plugin_msg, "is loaded but not enabled.")
         table.insert(messages, plugin_msg)
      end
   end
   return messages
end

function load_required_plugins()
   -- Load plugins which are necessary for Miriani-Next to function.

   load_plugins(required_plugins)
end

function do_plugin_check_now_redirect(text)
   parts = text:split(",", false, 1)
   do_plugin_check_now(parts[1], parts[2])
   plugin_check_alias()
end

function plugin_check_alias(name, line, wildcards, styles)
   local messages = {}

   -- Check required plugins
   local required_messages = check_plugins(required_plugins)

   -- Check optional plugins if any exist
   local optional_messages = check_plugins(optional_plugins)

   print()
   if #required_messages > 0 then
      ColourNote("red", "", "The following REQUIRED plugins aren't currently active:")
      for _,m in ipairs(required_messages) do
         ColourNote(unpack(m))
         plugin_name = m[6]:sub(1,-5)
         plugin_id = m[12]
         verb = "[ Click here to "..(IsPluginInstalled(plugin_id) and "enable " or "load ")
         Hyperlink("!!"..GetPluginID()..":do_plugin_check_now_redirect("..plugin_id..","..plugin_name..")", verb..plugin_name.." ]", verb..plugin_name, "khaki", 0, false)
         Simulate("\r")
      end
   end

   if #optional_messages > 0 then
      ColourNote("paleturquoise", "", "The following optional plugins aren't currently active:")
      for _,m in ipairs(optional_messages) do
         ColourNote(unpack(m))
         plugin_name = m[6]:sub(1,-5)
         plugin_id = m[12]
         verb = "[ Click here to "..(IsPluginInstalled(plugin_id) and "enable " or "load ")
         Hyperlink("!!"..GetPluginID()..":do_plugin_check_now_redirect("..plugin_id..","..plugin_name..")", verb..plugin_name.." ]", verb..plugin_name, "khaki", 0, false)
         Simulate("\r")
      end
   elseif #required_messages == 0 then
      ColourNote("green", "", "All required plugins are loaded and enabled.")
   end
   print()
end

function OnPluginListChanged()
   load_required_plugins()
end

function OnPluginInstall()
   fix_settings()
end

function OnPluginSaveState()
   fix_settings()
end

function OnPluginClose()
   fix_settings()
end

function fix_settings()
   -- Guarantee various useful world file settings
   SetOption("omit_date_from_save_files", 1)  -- slightly less clutter in settings files
   SetAlphaOption("terminal_identification", "MUSHclient-Miriani") -- helps server identify the client

   -- Convert settings that start with the MUSHclient folder path to relative paths
   local function relative_paths()
      local mushclient_path = GetInfo(66)
      local mpathlen = #mushclient_path
   
      for _, maybe_pathname in ipairs(GetAlphaOptionList()) do
         local maybe_path = tostring(GetAlphaOption(maybe_pathname))
         local new_path = (maybe_path:sub(0, mpathlen) == mushclient_path) and maybe_path:sub(mpathlen+1) or maybe_path
         if new_path ~= maybe_path then
            SetAlphaOption(maybe_pathname, new_path)
         end
      end
   
      local exec_lines = {}
      for _, maybe_pathname in ipairs(GetGlobalOptionList()) do
         local maybe_path = tostring(GetGlobalOption(maybe_pathname))
         local new_path = (maybe_path:sub(0, mpathlen) == mushclient_path) and maybe_path:sub(mpathlen+1) or maybe_path
         if new_path ~= maybe_path then
            table.insert(exec_lines, 'UPDATE prefs SET value = "'..new_path..'" WHERE name = "'..maybe_pathname..'"')
         end
      end
      return exec_lines
   end

   local exec_lines = relative_paths()

   -- Edit the preferences db to stop opening the activity window at startup
   if tonumber(GetGlobalOption("OpenActivityWindow")) ~= 0 then
      table.insert(exec_lines, 'UPDATE prefs SET value = 0 WHERE name = "OpenActivityWindow"')
   end
   -- and disable smooth/smoother scrolling because they are horribly slow
   if tonumber(GetGlobalOption("SmoothScrolling")) ~= 0 then
      table.insert(exec_lines, 'UPDATE prefs SET value = 0 WHERE name = "SmoothScrolling"')
   end
   if tonumber(GetGlobalOption("SmootherScrolling")) ~= 0 then
      table.insert(exec_lines, 'UPDATE prefs SET value = 0 WHERE name = "SmootherScrolling"')
   end

   -- Configure additional MUSHclient preferences for better user experience
   if tonumber(GetGlobalOption("F1macro")) ~= 1 then
      table.insert(exec_lines, 'UPDATE prefs SET value = 1 WHERE name = "F1macro"')
   end
   if tonumber(GetGlobalOption("ConfirmBeforeClosingMushclient")) ~= 1 then
      table.insert(exec_lines, 'UPDATE prefs SET value = 1 WHERE name = "ConfirmBeforeClosingMushclient"')
   end
   if tonumber(GetGlobalOption("ConfirmBeforeClosingWorld")) ~= 0 then
      table.insert(exec_lines, 'UPDATE prefs SET value = 0 WHERE name = "ConfirmBeforeClosingWorld"')
   end
   if tonumber(GetGlobalOption("ConfirmBeforeSavingVariables")) ~= 0 then
      table.insert(exec_lines, 'UPDATE prefs SET value = 0 WHERE name = "ConfirmBeforeSavingVariables"')
   end

   update_prefs(exec_lines)
end

function update_prefs(exec_lines)
   if #exec_lines > 0 then
      local req_prefs_db = sqlite3.open(GetInfo(82))
      for _,line in ipairs(exec_lines) do
         req_prefs_db:exec(line)
      end
      req_prefs_db:close()
      utils.reload_global_prefs()
   end
end

]]>
</script>
</muclient>
